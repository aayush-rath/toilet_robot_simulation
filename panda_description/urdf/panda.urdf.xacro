<?xml version="1.1"?>
<!-- URDF for Franka Emika Panda -->
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg name)">
  
  <!--                   -->
  <!-- Imported elements -->
  <!--                   -->
  <xacro:include filename="$(find panda_description)/urdf/panda_arm.xacro"/>
  <xacro:include filename="$(find panda_description)/urdf/panda_gripper.xacro"/>
  <xacro:include filename="$(find panda_description)/urdf/panda_utils.xacro"/>
  <xacro:include filename="$(find panda_description)/urdf/panda.gazebo"/>


  <!--            -->
  <!-- Parameters -->
  <!--            -->
  <!-- Name of the robot (mandatory) -->
  <xacro:arg name="name" default="panda"/>
  <!-- Prefix for all entities -->
  <xacro:arg name="prefix" default="$(arg name)_"/>

  <!-- Flag to enable default gripper -->
  <xacro:arg name="gripper" default="true" />

  <!-- Flag to enable collision geometry for manipulator's arm -->
  <xacro:arg name="collision_arm" default="true"/>
  <!-- Flag to enable collision geometry for manipulator's gripper (hand and fingers) -->
  <xacro:arg name="collision_gripper" default="true"/>

  <!-- Flag to enable safety limits controllers on manipulator joints -->
  <xacro:arg name="safety_limits" default="false"/>
  <!-- Lower and upper margin for position limits of all safety controllers -->
  <xacro:arg name="safety_position_margin" default="0.17453293"/>
  <!-- Parametric k-position factor of all safety controllers -->
  <xacro:arg name="safety_k_position" default="100.0"/>
  <!-- Parametric k-velocity factor of all safety controllers -->
  <xacro:arg name="safety_k_velocity" default="40.0"/>

  <!-- Flag to enable ros2 controllers for manipulator -->
  <xacro:arg name="ros2_control" default="true"/>
  <!-- The ros2_control plugin that should be loaded for the manipulator ('fake', 'gz', 'real' or custom) -->
  <xacro:arg name="ros2_control_plugin" default="gz"/>
  <!-- The output control command interface provided by ros2_control ('position', 'velocity', 'effort' or certain combinations 'position,velocity') -->
  <xacro:arg name="ros2_control_command_interface" default="effort"/>
  <!-- The filepath to parameters of ROS 2 controllers -->
  <xacro:arg name="ros2_controller_parameters" default="$(find panda_moveit_config)/config/controllers_$(arg ros2_control_command_interface).yaml"/>

  <!-- Flag to preserve fixed joints and prevent lumping when generating SDF for Gazebo -->
  <xacro:arg name="gazebo_preserve_fixed_joint" default="false"/>


  <!--            -->
  <!-- Properties -->
  <!--            -->
  <!-- Prefixes -->
  <xacro:property name="prefix_arm" value="$(arg prefix)"/>
  <xacro:property name="prefix_gripper" value="$(arg prefix)"/>

  <!-- Origin of arm in the world -->
  <xacro:property name="world_name" value="world"/>
  <xacro:property name="origin_xyz" value="0 0 0"/>
  <xacro:property name="origin_rpy" value="0 0 0"/>

  <!-- Offset of gripper with respect to wrist flange -->
  <xacro:property name="gripper_offset_xyz" value="0 0 0"/>
  <xacro:property name="gripper_offset_rpy" value="0 0 0"/>


  <!--       -->
  <!-- Robot -->
  <!--       -->
  <!-- Dummy world link that the robot is fixed to -->
  <xacro:panda_dummy_link
    link_name="${world_name}"
    gazebo_preserve_fixed_joint="$(arg gazebo_preserve_fixed_joint)"
  />

  <!-- Arm -->
  <xacro:panda_arm
    base_parent="panda_mount_plate"
    prefix="${prefix_arm}"
    origin_xyz="0 0 0.05"
    origin_rpy="${origin_rpy}"
    collision="$(arg collision_arm)"
    safety_limits="$(arg safety_limits)"
    safety_position_margin="$(arg safety_position_margin)"
    safety_k_position="$(arg safety_k_position)"
    safety_k_velocity="$(arg safety_k_velocity)"
    ros2_control="$(arg ros2_control)"
    ros2_control_plugin="$(arg ros2_control_plugin)"
    ros2_control_command_interface="$(arg ros2_control_command_interface)"
    gazebo_preserve_fixed_joint="$(arg gazebo_preserve_fixed_joint)"
  />

  <!-- Gripper -->
  <xacro:if value="$(arg gripper)">
    <xacro:panda_gripper
      wrist_flange="${prefix_arm}${wrist_flange_name}"
      prefix="${prefix_gripper}"
      origin_xyz="${gripper_offset_xyz}"
      origin_rpy="${gripper_offset_rpy}"
      collision="$(arg collision_gripper)"
      ros2_control="$(arg ros2_control)"
      ros2_control_plugin="$(arg ros2_control_plugin)"
      ros2_control_command_interface="$(arg ros2_control_command_interface)"
      gazebo_preserve_fixed_joint="$(arg gazebo_preserve_fixed_joint)"
    />
  </xacro:if>

  <!-- Gazebo - ROS 2 control -->
  <xacro:if value="$(arg ros2_control)">
    <xacro:if value="${'gz' in '$(arg ros2_control_plugin)'}">
      <xacro:gz_ros2_control controller_parameters="$(arg ros2_controller_parameters)"/>
    </xacro:if>
  </xacro:if>

  <!-- Mounting parameters for Panda on MiR -->
  <xacro:arg name="panda_mount_height" default="0.35"/>  <!-- Height above MiR base -->
  <xacro:arg name="panda_mount_x" default="0.0"/>       <!-- X offset from MiR center -->
  <xacro:arg name="panda_mount_y" default="0.0"/>       <!-- Y offset from MiR center -->

  <xacro:include filename="$(find panda_description)/urdf/mir.urdf.xacro"/>

  <!-- <link name="${world_name}"/> -->

  <!-- MiR mobile base -->
  <xacro:mir/>

  <!-- Fixed joint connecting world to MiR base -->
  <joint name="world_to_mir_joint" type="fixed">
    <parent link="${world_name}"/>
    <child link="base_footprint"/>
    <origin xyz="0 0 0.05" rpy="${origin_rpy}"/>
  </joint>

  <!-- Mounting plate link -->
  <link name="panda_mount_plate">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.1" ixy="0" ixz="0" iyy="0.1" iyz="0" izz="0.1"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.3 0.3 0.05"/>
      </geometry>
      <material name="mount_plate_color">
        <color rgba="0.8 0.8 0.8 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.3 0.3 0.05"/>
      </geometry>
    </collision>
  </link>

  <!-- Fixed joint mounting the plate to MiR base -->
  <joint name="mir_to_mount_plate_joint" type="fixed">
    <parent link="base_link"/>
    <child link="panda_mount_plate"/>
    <origin xyz="$(arg panda_mount_x) $(arg panda_mount_y) $(arg panda_mount_height)" rpy="0 0 0"/>
  </joint>
</robot>
